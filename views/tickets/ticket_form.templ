package tickets

import (
	"github.com/VladanT3/IT_Ticketing_Platform/models"
	"github.com/VladanT3/IT_Ticketing_Platform/views/layouts"
	"github.com/google/uuid"
	"strconv"
)

templ TicketForm(ticket models.Ticket, currentUser models.Analyst, userType string, mode string, categoryError string, subcategoryError string, newTicket models.Ticket) {
	@layouts.Navbar(userType) {
		<div class="container mx-auto mt-5">
			<form action="/ticket" method="POST" class="grid grid-cols-5">
				<input type="hidden" value={ mode } name="mode"/>
				<input type="hidden" value={ ticket.Ticket_ID.String() } name="ticketID"/>
				<div class="col-span-1 grid grid-cols-5">
					<div class="flex flex-col col-span-4">
						if mode == "create" {
							<button type="submit" name="saveType" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50" value="Save">Save</button>
							<button type="submit" name="saveType" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3" value="Save and Exit">Save and Exit</button>
						} else if mode == "update" {
							if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
								if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
									<button type="submit" name="saveType" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50" value="Save">Save</button>
									<button type="submit" name="saveType" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3" value="Save and Exit">Save and Exit</button>
									if ticket.Status == "Open" {
										<button hx-put={ "/ticket/close/" + ticket.Ticket_ID.String() } type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Close Ticket</button>
									}
								} else {
									<a href="/tickets/search" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50">Exit</a>
								}
							} else {
								<button type="submit" name="saveType" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50" value="Save">Save</button>
								<button type="submit" name="saveType" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3" value="Save and Exit">Save and Exit</button>
								if ticket.Status == "Open" {
									<button hx-put={ "/ticket/close/" + ticket.Ticket_ID.String() } type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Close Ticket</button>
								}
							}
							if ticket.Status == "Closed" {
								if ticket.Assigned_Analyst.UUID == currentUser.Analyst_ID {
									<a href={ "/ticket/" + templ.SafeURL(ticket.Ticket_ID.String()) + "/reopen/form" } class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Reopen</a>
								} else if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
									<a href={ "/ticket/" + templ.SafeURL(ticket.Ticket_ID.String()) + "/reopen/form" } class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Reopen</a>
								}
							}
							if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
								if !ticket.Assigned_Analyst.Valid {
									<button type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Assign to Me</button>
								} else if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
									<button type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Assign to Me</button>
								}
							}
							if ticket.Assigned_Analyst.UUID == currentUser.Analyst_ID {
								<button type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Assign Ticket</button>
							} else if !ticket.Assigned_Analyst.Valid {
								<button type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Assign Ticket</button>
							} else if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
								<button type="button" class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Assign Ticket</button>
							}
							if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
								<button type="button" hx-delete={ "/ticket/delete/" + ticket.Ticket_ID.String() } hx-target="#ticket_form" hx-swap="innerHTML" class="uk-button uk-width-1-1 bg-zinc-900 text-red-600 border border-red-600 hover:bg-red-600 hover:text-zinc-900 mt-3">Delete Ticket</button>
							}
							<hr class="mt-3"/>
							<a href={ "/ticket/" + templ.SafeURL(ticket.Ticket_ID.String()) + "/reopen/history" } class="uk-button uk-width-1-1 bg-zinc-50 text-zinc-900 border border-zinc-50 hover:bg-zinc-900 hover:text-zinc-50 mt-3">Reopen History</a>
						}
					</div>
					<div class="uk-divider-vertical min-h-full"></div>
				</div>
				<div class="col-span-4">
					<div class="flex flex-col" id="ticket_form">
						if mode == "update" {
							<div class="grid grid-cols-4">
								<div class="col-span-3">
									if ticket.Type == "Request" {
										<span class="text-xl">REQ/{ strconv.Itoa(ticket.Ticket_Number) }</span>
									} else {
										<span class="text-xl">INC/{ strconv.Itoa(ticket.Ticket_Number) }</span>
									}
								</div>
								<div>
									<span class="border border-zinc-50 rounded-full" style="padding-top: 0.25rem; padding-bottom: 0.25rem; padding-right: 1rem; padding-left: 1rem; user-select: none;">{ ticket.Status }</span>
								</div>
							</div>
							<hr class="mt-5 mb-3"/>
						}
						<div class="grid grid-cols-4">
							<div>
								<label>Ticket type:</label>
								if ticket.Status == "Closed" {
									<select disabled name="ticketType" class="uk-select text-zinc-50">
										if ticket.Type == "Request" {
											<option value="Request" selected>Request</option>
											<option value="Incident">Incident</option>
										} else if ticket.Type == "Incident" {
											<option value="Request">Request</option>
											<option value="Incident" selected>Incident</option>
										}
									</select>
								} else {
									if mode == "create" {
										<select name="ticketType" class="uk-select text-zinc-50">
											if newTicket.Type == "Request" {
												<option value="Request" selected>Request</option>
												<option value="Incident">Incident</option>
											} else if newTicket.Type == "Incident" {
												<option value="Request">Request</option>
												<option value="Incident" selected>Incident</option>
											} else {
												<option value="Request">Request</option>
												<option value="Incident">Incident</option>
											}
										</select>
									} else if mode == "update" {
										if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
											if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
												<select name="ticketType" class="uk-select text-zinc-50">
													if newTicket.Type == "Request" {
														<option value="Request" selected>Request</option>
														<option value="Incident">Incident</option>
													} else if newTicket.Type == "Incident" {
														<option value="Request">Request</option>
														<option value="Incident" selected>Incident</option>
													} else {
														if ticket.Type == "Request" {
															<option value="Request" selected>Request</option>
															<option value="Incident">Incident</option>
														} else if ticket.Type == "Incident" {
															<option value="Request">Request</option>
															<option value="Incident" selected>Incident</option>
														}
													}
												</select>
											} else {
												<select name="ticketType" class="uk-select text-zinc-50" disabled>
													if ticket.Type == "Request" {
														<option value="Request" selected>Request</option>
														<option value="Incident">Incident</option>
													} else if ticket.Type == "Incident" {
														<option value="Request">Request</option>
														<option value="Incident" selected>Incident</option>
													}
												</select>
											}
										} else {
											<select name="ticketType" class="uk-select text-zinc-50">
												if newTicket.Type == "Request" {
													<option value="Request" selected>Request</option>
													<option value="Incident">Incident</option>
												} else if newTicket.Type == "Incident" {
													<option value="Request">Request</option>
													<option value="Incident" selected>Incident</option>
												} else {
													if ticket.Type == "Request" {
														<option value="Request" selected>Request</option>
														<option value="Incident">Incident</option>
													} else if ticket.Type == "Incident" {
														<option value="Request">Request</option>
														<option value="Incident" selected>Incident</option>
													}
												}
											</select>
										}
									}
								}
							</div>
							<div></div>
							<div>
								<label>Customer contact:</label>
								if ticket.Status == "Closed" {
									<input disabled name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Customer_Contact } required/>
								} else {
									if mode == "create" {
										<input name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ newTicket.Customer_Contact } required/>
									} else if mode == "update" {
										if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
											if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
												if newTicket.Customer_Contact != "" {
													<input name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ newTicket.Customer_Contact } required/>
												} else {
													<input name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Customer_Contact } required/>
												}
											} else {
												<input disabled name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Customer_Contact } required/>
											}
										} else {
											if newTicket.Customer_Contact != "" {
												<input name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ newTicket.Customer_Contact } required/>
											} else {
												<input name="customerContact" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Customer_Contact } required/>
											}
										}
									}
								}
							</div>
						</div>
						<div class="grid grid-cols-4 mt-3">
							<div>
								<label>Category:</label>
								if ticket.Status == "Closed" {
									<select disabled name="category" class="uk-select text-zinc-50">
										for _, category := range models.GetAllCategories() {
											if newTicket.Category.UUID == category.Category_ID {
												<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
											} else {
												<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
											}
										}
									</select>
								} else {
									if mode == "create" {
										if categoryError == "" {
											<select name="category" class="uk-select text-zinc-50" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
												<option value="none">Select...</option>
												for _, category := range models.GetAllCategories() {
													if newTicket.Category.UUID == category.Category_ID {
														<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
													} else {
														<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
													}
												}
											</select>
										} else {
											<select name="category" class="uk-select text-zinc-50 border border-red-600" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
												<option value="none">Select...</option>
												for _, category := range models.GetAllCategories() {
													if newTicket.Category.UUID == category.Category_ID {
														<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
													} else {
														<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
													}
												}
											</select>
											<label class="text-red-600">{ categoryError }</label>
										}
									} else if mode == "update" {
										if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
											if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
												if categoryError == "" {
													<select name="category" class="uk-select text-zinc-50" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
														<option value="none">Select...</option>
														for _, category := range models.GetAllCategories() {
															if newTicket.Category.UUID == category.Category_ID {
																<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
															} else {
																if ticket.Category.UUID == category.Category_ID {
																	<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
																} else {
																	<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
																}
															}
														}
													</select>
												} else {
													<select name="category" class="uk-select text-zinc-50 border border-red-600" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
														<option value="none">Select...</option>
														for _, category := range models.GetAllCategories() {
															if newTicket.Category.UUID == category.Category_ID {
																<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
															} else {
																if ticket.Category.UUID == category.Category_ID {
																	<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
																} else {
																	<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
																}
															}
														}
													</select>
													<label class="text-red-600">{ categoryError }</label>
												}
											} else {
												<select disabled name="category" class="uk-select text-zinc-50" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
													for _, category := range models.GetAllCategories() {
														if newTicket.Category.UUID == category.Category_ID {
															<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
														} else {
															if ticket.Category.UUID == category.Category_ID {
																<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
															} else {
																<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
															}
														}
													}
												</select>
											}
										} else {
											if categoryError == "" {
												<select name="category" class="uk-select text-zinc-50" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
													<option value="none">Select...</option>
													for _, category := range models.GetAllCategories() {
														if newTicket.Category.UUID == category.Category_ID {
															<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
														} else {
															if ticket.Category.UUID == category.Category_ID {
																<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
															} else {
																<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
															}
														}
													}
												</select>
											} else {
												<select name="category" class="uk-select text-zinc-50 border border-red-600" hx-get="/subcategories/get/select" hx-target="#subcategories" hx-swap="outerHTML" hx-trigger="change">
													<option value="none">Select...</option>
													for _, category := range models.GetAllCategories() {
														if newTicket.Category.UUID == category.Category_ID {
															<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
														} else {
															if ticket.Category.UUID == category.Category_ID {
																<option value={ category.Category_ID.String() } selected>{ category.Category_Name }</option>
															} else {
																<option value={ category.Category_ID.String() }>{ category.Category_Name }</option>
															}
														}
													}
												</select>
												<label class="text-red-600">{ categoryError }</label>
											}
										}
									}
								}
							</div>
							<div></div>
							<div>
								<label>Subcategory:</label>
								if ticket.Status == "Closed" {
									<select disabled name="subcategory" class="uk-select text-zinc-50" id="subcategories">
										for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
											if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
												<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
											} else {
												<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
											}
										}
									</select>
								} else {
									if mode == "create" {
										if subcategoryError == "" {
											if newTicket.Category.UUID != uuid.Nil {
												<select name="subcategory" class="uk-select text-zinc-50" id="subcategories">
													for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
														if newTicket.Subcategory.UUID == subcategory.Subcategory_ID {
															<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
														} else {
															if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
																<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
															} else {
																<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
															}
														}
													}
												</select>
											} else {
												<select name="subcategory" class="uk-select text-zinc-50" id="subcategories" disabled>
													<option value="none">Please select category</option>
												</select>
											}
										} else {
											if newTicket.Category.UUID != uuid.Nil {
												<select name="subcategory" class="uk-select text-zinc-50 border border-red-600" id="subcategories">
													for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
														if newTicket.Subcategory.UUID == subcategory.Subcategory_ID {
															<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
														} else {
															if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
																<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
															} else {
																<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
															}
														}
													}
												</select>
												<label class="text-red-600">{ subcategoryError }</label>
											} else {
												<select name="subcategory" class="uk-select text-zinc-50 border border-red-600" id="subcategories" disabled>
													<option value="none">Please select category</option>
												</select>
												<label class="text-red-600">{ subcategoryError }</label>
											}
										}
									} else if mode == "update" {
										if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
											if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
												if subcategoryError == "" {
													<select name="subcategory" class="uk-select text-zinc-50" id="subcategories">
														for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
															if newTicket.Subcategory.UUID == subcategory.Subcategory_ID {
																<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
															} else {
																if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
																	<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
																} else {
																	<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
																}
															}
														}
													</select>
												} else {
													<select name="subcategory" class="uk-select text-zinc-50 border border-red-600" id="subcategories">
														for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
															if newTicket.Subcategory.UUID == subcategory.Subcategory_ID {
																<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
															} else {
																if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
																	<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
																} else {
																	<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
																}
															}
														}
													</select>
													<label class="text-red-600">{ subcategoryError }</label>
												}
											} else {
												<select disabled name="subcategory" class="uk-select text-zinc-50" id="subcategories">
													for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
														if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
															<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
														} else {
															<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
														}
													}
												</select>
											}
										} else {
											if subcategoryError == "" {
												<select name="subcategory" class="uk-select text-zinc-50" id="subcategories">
													for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
														if newTicket.Subcategory.UUID == subcategory.Subcategory_ID {
															<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
														} else {
															if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
																<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
															} else {
																<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
															}
														}
													}
												</select>
											} else {
												<select name="subcategory" class="uk-select text-zinc-50 border border-red-600" id="subcategories">
													for _, subcategory := range models.GetSubcategories(ticket.Category.UUID.String()) {
														if newTicket.Subcategory.UUID == subcategory.Subcategory_ID {
															<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
														} else {
															if ticket.Subcategory.UUID == subcategory.Subcategory_ID {
																<option value={ subcategory.Subcategory_ID.String() } selected>{ subcategory.Subcategory_Name }</option>
															} else {
																<option value={ subcategory.Subcategory_ID.String() }>{ subcategory.Subcategory_Name }</option>
															}
														}
													}
												</select>
												<label class="text-red-600">{ subcategoryError }</label>
											}
										}
									}
								}
							</div>
						</div>
						<div class="mt-3">
							<label>Title:</label>
							if ticket.Status == "Closed" {
								<input disabled name="title" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Title } required/>
							} else {
								if mode == "create" {
									<input name="title" class="uk-input text-zinc-50 text-base" type="text" value={ newTicket.Title } required/>
								} else if mode == "update" {
									if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
										if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
											if newTicket.Title != "" {
												<input name="title" class="uk-input text-zinc-50 text-base" type="text" value={ newTicket.Title } required/>
											} else {
												<input name="title" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Title } required/>
											}
										} else {
											<input disabled name="title" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Title } required/>
										}
									} else {
										if newTicket.Title != "" {
											<input name="title" class="uk-input text-zinc-50 text-base" type="text" value={ newTicket.Title } required/>
										} else {
											<input name="title" class="uk-input text-zinc-50 text-base" type="text" value={ ticket.Title } required/>
										}
									}
								}
							}
						</div>
						<div class="mt-3">
							<label>Description:</label>
							if ticket.Status == "Closed" {
								<textarea disabled name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ ticket.Description }</textarea>
							} else {
								if mode == "create" {
									<textarea name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ newTicket.Description }</textarea>
								} else if mode == "update" {
									if ticket.Assigned_Analyst.UUID != currentUser.Analyst_ID {
										if currentUser.Analyst_ID == models.GetTeam(ticket.Assigned_Team.UUID.String()).Manager_ID.UUID {
											if newTicket.Description != "" {
												<textarea name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ newTicket.Description }</textarea>
											} else {
												<textarea name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ ticket.Description }</textarea>
											}
										} else {
											<textarea disabled name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ ticket.Description }</textarea>
										}
									} else {
										if newTicket.Description != "" {
											<textarea name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ newTicket.Description }</textarea>
										} else {
											<textarea name="desc" class="uk-textarea font-mono text-zinc-50 text-base" rows="10">{ ticket.Description }</textarea>
										}
									}
								}
							}
						</div>
						if mode == "update" {
							<hr class="mt-5"/>
							<div class="grid grid-cols-4 mt-3">
								<div class="col-span-1">
									<label>Last Updated:</label>
									<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ ticket.Updated_at.Format("Mon 02/01 15:04 2006.") }/>
								</div>
							</div>
							<div class="grid grid-cols-4 mt-3">
								<div>
									<label>Assigned Team:</label>
									<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ models.GetAnalystsTeam(ticket.Assigned_Analyst.UUID.String()).Team_Name }/>
								</div>
								<div></div>
								<div>
									<label>Assigned Analyst:</label>
									<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ models.GetAnalyst(ticket.Assigned_Analyst.UUID.String()).First_Name + " " + models.GetAnalyst(ticket.Assigned_Analyst.UUID.String()).Last_Name }/>
								</div>
							</div>
							<div class="grid grid-cols-4">
								<div>
									<label>Opened by:</label>
									<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ models.GetAnalyst(ticket.Opened_by.UUID.String()).First_Name + " " + models.GetAnalyst(ticket.Opened_by.UUID.String()).Last_Name }/>
								</div>
								<div></div>
								<div>
									<label>Opened:</label>
									<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ ticket.Opened_Date.Format("Mon 02/01 15:04 2006.") }/>
								</div>
							</div>
							<div class="grid grid-cols-4">
								<div>
									<label>Closed by:</label>
									<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ models.GetAnalyst(ticket.Closed_by.UUID.String()).First_Name + " " + models.GetAnalyst(ticket.Closed_by.UUID.String()).Last_Name }/>
								</div>
								<div></div>
								<div>
									<label>Closed:</label>
									if ticket.Closed_Date.Valid {
										<input class="uk-input text-zinc-50 text-base" type="text" disabled value={ ticket.Closed_Date.Time.Format("Mon 02/01 15:04 2006.") }/>
									} else {
										<input class="uk-input text-zinc-50 text-base" type="text" disabled/>
										}
								</div>
							</div>
						}
					</div>
				</div>
			</form>
		</div>
	}
}
